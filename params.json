{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Generate sourcecode from xml model definitions","google":"","name":"Modeler","body":"Modeler\r\n======\r\n*generate model source code from xml definitions*\r\n***\r\n\r\nModeler is a Programm to generate class model source code from xml model definitions.\r\nAny language with a basic class system is supported. Your can generate multiple languages with the same model definition.\r\n\r\nThere are different template projects available:\r\n\r\n//todo add list of template projects\r\n\r\n## Usage\r\n\r\n### run from source with [leiningen 2][lein]\r\n\r\nMake sure you have installed [leiningen][lein_install] on your system.\r\nRun Modeler like this:\r\n\r\n    lein run -- [options] path/to/model-definition.xml\r\n\r\n### run from modeler.jar\r\n\r\nYou can eather build or download the modeler.jar.\r\nA complete jar with all dependencies can be found [here][modelerJar]: \r\n\r\n    java -jar path/to/modle.jar -- [options] path/to/model-definition.xml\r\n\r\n\r\n### Options\r\n\r\nuse the option -h or --help when you run Modeler to see a help page with all available options\r\n\r\n    usage: Modeler [options] [model PATH]\r\n\r\n    Switches                     Default       Desc                                                                  \r\n    --------                     -------       ----                                                                  \r\n    -lang, --languages           [\"*\"]         comma separated    list of languages to generate example 'as3,java,objc' \r\n    -t, --template-path          ./templates/  Path to template files                                                \r\n    -o, --output-path            ./generated/  The output path                                                       \r\n    -v, --no-verbose, --verbose  false                                                                               \r\n    -h, --no-help, --help        false         Show help\r\n\r\n\r\n### Model XML\r\n\r\nYou define your class definitions with a simple xml structure. You can define classes and interfaces. You can set a lang attributes to all entities to generate only language specific classes, interfaces, methods, properties, â€¦ and so on. \r\n\r\n**example:**\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE model SYSTEM \"http://www.modeler.tslarusso.de/generator.dtd\">\r\n<model xmlns=\"http://www.modeler.tslarusso.de/modelerSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://www.modeler.tslarusso.de/modeler.xsd\">\r\n    <class type=\"SimpleClass\" lang=\"java\">\r\n    \t\t<property name=\"name\" type=\"String\"/>\r\n    \t\t<method returns=\"object\" name=\"gimmeAllYouGot\"/>\r\n    \t</class>\r\n\r\n        <class type=\"OtherSimpleClass\" lang=\"cpp\">\r\n    \t\t<property name=\"name\" type=\"String\"/>\r\n    \t\t<method returns=\"object\" name=\"gimmeAllYouGot\"/>\r\n    \t</class>\r\n    </model>\r\n```\r\nFor a full modeler xml description see: //todo add link to wiki here\r\n\r\n### Generated Model\r\n\r\nModeler transforms the xml definitions to clojure data. Modeler applies the designated template to all entries after the conversion. The [mustache][mustache] template will be provided with a hashmap containing all the converted information\r\n\r\n-- add example here\r\n\r\nFor a full description see: //todo add link to wiki here\r\n\r\n### Class Templates\r\nTemplates are written in the logic less [mustache][mustache] style.\r\nEach template is referenced by its template key and language.\r\n\r\n**example:**\r\n\r\n* __java class template__ java.class.mustache\r\n* __java iface template__ java.iface.mustache\r\n\r\nclass and face are the default template keys for class and iface model definitions. You can set any template key for your class or iface definition.\r\n\r\n**example:**\r\n* __as3 decorator class template__ as3.decoratorClass.mustache\r\n\r\n## run 'Modeler'\r\n\r\n### run with lein2\r\n\r\nMake sure you have installed [leiningen][lein] on your system.\r\nRun Modeler like this:\r\n\r\n    lein run -- path/to/model.xml\r\n\r\n### create uberjar\r\n\r\nCreate a uberjar with leiningen:\r\n\r\n    lein uberjar\r\n\r\n\r\n\r\n## License\r\n\r\nCopyright (C) 2012 Manfred Endres\r\n\r\nDistributed under the Eclipse Public License, the same as Clojure.\r\n\r\n[lein]: https://github.com/technomancy/leiningen \"leiningen 2\"\r\n[lein_install]: https://github.com/technomancy/leiningen/wiki/Upgrading \"leiningen installation\"\r\n[mustache_man]: http://mustache.github.com/mustache.5.html \"mustache manual\"\r\n[mustache]: http://mustache.github.com \"mustache -- Logic-less templates.\"\r\n[modelerJar]: http://www.google.de"}