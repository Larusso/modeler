![{:extension "as"}]
package {{package}}
{
	{{#imports}}
    import {{namespace}}.{{name}};
	{{/imports}}
	{{#methods?}}
	import flash.errors.IllegalOperationError;
	{{/methods?}}


	public class {{type-name}}{{#super-types?}} extends {{super-types.first.name}}{{/super-types?}}{{#implements}} implements {{implements.first.name}}{{#implements.rest}}, {{name}}{{/implements.rest}}{{/implements?}}
	{
		{{#properties?}}
		///////////////////////////////////////////////
		//  properties
		//////////////////////////////////////////////

		{{/properties?}}

		{{#properties.all}}
		//---------------------------------------------
		//  {{name}}
		//---------------------------------------------

		private var _{{name}}:{{#type}}{{name}}{{/type}};

		public function get {{name}}():{{#type}}{{name}}{{/type}}
		{
			return _{{name}};
		}

		public function set {{name}}(value:{{#type}}{{name}}{{/type}}):void
		{
			_{{name}} = value;
		}

        {{/properties.all}}

        {{#decorates?}}
        ///////////////////////////////////////////////
        //  decorates
        //////////////////////////////////////////////

        {{/decorates?}}

		{{#decorates.all}}

		private var {{field-name}}:{{#type}}{{name}}{{/type}} = new {{#type}}{{name}}{{/type}}();

		{{#properties}}
        //---------------------------------------------
        //  decorate {{name}}
        //---------------------------------------------

        public function get {{name}}():{{#type}}{{name}}{{/type}}
        {
            return {{field-name}}.{{name}};
        }

        public function set {{name}}(value:{{#type}}{{name}}{{/type}}):void
        {
            {{field-name}}.{{name}} = value;
        }

        {{/properties.all}}

        {{#methods.all}}
        //---------------------------------------------
        //  decorate {{name}}
        //---------------------------------------------

        public function {{name}}( {{#params}}{{#first}}{{name}}:{{#type}}{{name}}{{/type}}{{/first}}{{#rest}}, {{name}}:{{#type}}{{name}}{{/type}}{{/rest}}{{/params}} ):{{#returns}}{{name}}{{/returns}}
        {
            return {{field-name}}.{{name}}({{#params}}{{#first}}{{name}}{{/first}}{{#rest}}, {{name}}{{/rest}}{{/params}});
        }

        {{/methods.all}}

		{{/decorates}}


		///////////////////////////////////////////////
		//  constructor
		//////////////////////////////////////////////

		public function {{type-name}}()
		{
			{{#super-types?}}
			super();
			{{/super-types?}}
		}

		{{#methods?}}
		///////////////////////////////////////////////
		//  methods
		///////////////////////////////////////////////

		{{/methods?}}

		{{#methods.all}}
		//---------------------------------------------
		//  {{name}}
		//---------------------------------------------

		public function {{name}}( {{#params}}{{#first}}{{name}}:{{#type}}{{name}}{{/type}}{{/first}}{{#rest}}, {{name}}:{{#type}}{{name}}{{/type}}{{/rest}}{{/params}} ):{{#returns}}{{name}}{{/returns}}
		{
			throw new IllegalOperationError("override method {{name}} in subclass");
		}

		{{/methods.all}}



	}
}